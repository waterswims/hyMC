#ifndef _MKLRAND
#define _MKLRAND

#include "mkl.h"

///////////////////////////////////////////////////////////////////////////
/// Base class for the random number generators.
///////////////////////////////////////////////////////////////////////////
class mkl_randbase
{
protected:
	int arr_size;
	int curr;
	VSLStreamStatePtr stream;
public:
	///////////////////////////////////////////////////////////////////////////
	/// Default constructor.
	///////////////////////////////////////////////////////////////////////////
	mkl_randbase(){}
	///////////////////////////////////////////////////////////////////////////
	/// Default destructor.
	///////////////////////////////////////////////////////////////////////////
	~mkl_randbase(){vslDeleteStream(&stream);}
	///////////////////////////////////////////////////////////////////////////
	/// Refill the buffer with fresh random numbers.
	///////////////////////////////////////////////////////////////////////////
	virtual void fill(){}
	///////////////////////////////////////////////////////////////////////////
	/// \brief Change the current random seed.
	///
	/// \param seed The new seed.
	///////////////////////////////////////////////////////////////////////////
	virtual void change_seed(int seed){}
	///////////////////////////////////////////////////////////////////////////
	/// \brief Save the state of the current random stream to file.
	///
	/// \param name A string which defines the relative path of the output.
	///////////////////////////////////////////////////////////////////////////
	void save(const char* name) {vslSaveStreamF(stream, name);}
	///////////////////////////////////////////////////////////////////////////
	/// \brief Load the state a random stream from file.
	///
	/// \param name A string which defines the relative path of the input.
	///////////////////////////////////////////////////////////////////////////
	void load(const char* name) {vslDeleteStream(&stream); vslLoadStreamF(&stream, name);}
};

///////////////////////////////////////////////////////////////////////////
/// Generator for uniform numbers between 0 and 1
///////////////////////////////////////////////////////////////////////////
class mkl_drand: public mkl_randbase
{
private:
	double *randarr;

public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	/// \param size The size of the buffer which is created to hold random
	///             numbers.
	/// \param seed The inital seed of the random number generator. Defaults
	///             to 1.
	///////////////////////////////////////////////////////////////////////////
	mkl_drand(int size, int seed=1);
	///////////////////////////////////////////////////////////////////////////
	/// Default destructor.
	///////////////////////////////////////////////////////////////////////////
	~mkl_drand();
	///////////////////////////////////////////////////////////////////////////
	/// Return a single random number from the buffer.
	///////////////////////////////////////////////////////////////////////////
	double gen();
	///////////////////////////////////////////////////////////////////////////
	/// Refill the buffer with fresh random numbers.
	///////////////////////////////////////////////////////////////////////////
	void fill();
	///////////////////////////////////////////////////////////////////////////
	/// \brief Change the current random seed.
	///
	/// \param seed The new seed.
	///////////////////////////////////////////////////////////////////////////
	void change_seed(int seed);
};

///////////////////////////////////////////////////////////////////////////
/// Generator for uniform numbers either 0 or 1
///////////////////////////////////////////////////////////////////////////
class mkl_irand: public mkl_randbase
{
private:
	int *randarr;

public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	/// \param size The size of the buffer which is created to hold random
	///             numbers.
	/// \param seed The inital seed of the random number generator. Defaults
	///             to 1.
	///////////////////////////////////////////////////////////////////////////
	mkl_irand(int size, int seed=1);
	///////////////////////////////////////////////////////////////////////////
	/// Default destructor.
	///////////////////////////////////////////////////////////////////////////
	~mkl_irand();
	///////////////////////////////////////////////////////////////////////////
	/// Return a single random number from the buffer.
	///////////////////////////////////////////////////////////////////////////
	int gen();
	///////////////////////////////////////////////////////////////////////////
	/// Refill the buffer with fresh random numbers.
	///////////////////////////////////////////////////////////////////////////
	void fill();
	///////////////////////////////////////////////////////////////////////////
	/// \brief Change the current random seed.
	///
	/// \param seed The new seed.
	///////////////////////////////////////////////////////////////////////////
	void change_seed(int seed);
};

///////////////////////////////////////////////////////////////////////////
/// Generator for random numbers on a lognormal distribution
///////////////////////////////////////////////////////////////////////////
class mkl_lnrand: public mkl_randbase
{
private:
	double *randarr;
	double lmean, lsd;

public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	/// \param m The logarithmic mean of the lognormal distribution.
	/// \param sd The logarithmic standard deviation of the lognormal
	///           distribution.
	/// \param size The size of the buffer which is created to hold random
	///             numbers.
	/// \param seed The inital seed of the random number generator. Defaults
	///             to 1.
	///////////////////////////////////////////////////////////////////////////
	mkl_lnrand(double m, double sd, int size, int seed=1);
	///////////////////////////////////////////////////////////////////////////
	/// Default destructor.
	///////////////////////////////////////////////////////////////////////////
	~mkl_lnrand();
	///////////////////////////////////////////////////////////////////////////
	/// Return a single random number from the buffer.
	///////////////////////////////////////////////////////////////////////////
	double gen();
	///////////////////////////////////////////////////////////////////////////
	/// Refill the buffer with fresh random numbers.
	///////////////////////////////////////////////////////////////////////////
	void fill();
	///////////////////////////////////////////////////////////////////////////
	/// \brief Change the current random seed.
	///
	/// \param seed The new seed.
	///////////////////////////////////////////////////////////////////////////
	void change_seed(int seed);
};

///////////////////////////////////////////////////////////////////////////
/// Generator for random numbers on a normal distribution
///////////////////////////////////////////////////////////////////////////
class mkl_nrand: public mkl_randbase
{
private:
	double *randarr;
	double mean, sd;

public:
	///////////////////////////////////////////////////////////////////////////
	/// \brief Constructor
	///
	/// \param m The mean of the normal distribution.
	/// \param sdin The standard deviation of the normal distribution.
	/// \param size The size of the buffer which is created to hold random
	///             numbers.
	/// \param seed The inital seed of the random number generator. Defaults
	///             to 1.
	///////////////////////////////////////////////////////////////////////////
	mkl_nrand(double m, double sdin, int size, int seed=1);
	///////////////////////////////////////////////////////////////////////////
	/// Default destructor.
	///////////////////////////////////////////////////////////////////////////
	~mkl_nrand();
	///////////////////////////////////////////////////////////////////////////
	/// Return a single random number from the buffer.
	///////////////////////////////////////////////////////////////////////////
	double gen();
	///////////////////////////////////////////////////////////////////////////
	/// Refill the buffer with fresh random numbers.
	///////////////////////////////////////////////////////////////////////////
	void fill();
	///////////////////////////////////////////////////////////////////////////
	/// \brief Change the current random seed.
	///
	/// \param seed The new seed.
	///////////////////////////////////////////////////////////////////////////
	void change_seed(int seed);
};
#endif
