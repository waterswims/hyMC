#ifndef _STDRAND
#define _STDRAND

#include <random>

namespace stdrand
{
    ///////////////////////////////////////////////////////////////////////////
    /// Base class for the random number generators.
    ///////////////////////////////////////////////////////////////////////////
    class std_randbase
    {
    protected:
        std::mt19937_64 generator;
    public:
    	////////////////////////////////////////////////////////////////////////
    	/// Default constructor.
    	////////////////////////////////////////////////////////////////////////
    	std_randbase(){}
    	////////////////////////////////////////////////////////////////////////
    	/// Default destructor.
    	////////////////////////////////////////////////////////////////////////
    	~std_randbase(){}
    	////////////////////////////////////////////////////////////////////////
    	/// \brief Change the current random seed.
    	///
    	/// \param seed The new seed.
    	////////////////////////////////////////////////////////////////////////
    	void change_seed(int seed){generator.seed(seed);}
    };

    ///////////////////////////////////////////////////////////////////////////
    /// Generator for uniform numbers between 0 and 1
    ///////////////////////////////////////////////////////////////////////////
    class std_d_unirand : public std_randbase
    {
    private:
        std::uniform_real_distribution<double> distribution;
    public:
        ////////////////////////////////////////////////////////////////////////
    	/// \brief Constructor
    	///
    	/// \param seed The inital seed of the random number generator. Defaults
    	///             to 1.
    	////////////////////////////////////////////////////////////////////////
        std_d_unirand(int seed=1);
        ////////////////////////////////////////////////////////////////////////
    	/// Default destructor.
    	////////////////////////////////////////////////////////////////////////
    	~std_d_unirand(){}
        ////////////////////////////////////////////////////////////////////////
    	/// Return a single random number.
    	////////////////////////////////////////////////////////////////////////
    	double gen(){return distribution(generator);}
    };

    ///////////////////////////////////////////////////////////////////////////
    /// Generator for random numbers on a normal distribution
    ///////////////////////////////////////////////////////////////////////////
    class std_normrand : public std_randbase
    {
    private:
        std::normal_distribution<double> distribution;
    public:
        ////////////////////////////////////////////////////////////////////////
    	/// \brief Constructor
    	///
    	/// \param m The mean of the normal distribution.
    	/// \param sdin The standard deviation of the normal distribution.
    	/// \param seed The inital seed of the random number generator. Defaults
    	///             to 1.
    	////////////////////////////////////////////////////////////////////////
        std_normrand(double m, double sdin, int seed=1);
        ////////////////////////////////////////////////////////////////////////
    	/// Default destructor.
    	////////////////////////////////////////////////////////////////////////
    	~std_normrand(){}
        ////////////////////////////////////////////////////////////////////////
    	/// Return a single random number.
    	////////////////////////////////////////////////////////////////////////
    	double gen(){return distribution(generator);}
    };
}

#endif
